# source: https://us1.prisma.sh/public-neonscar-158/hackernews-graphql-js/dev
# timestamp: Sun Sep 16 2018 00:58:23 GMT+0800 (+08)

type AggregateHome {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type AggregateVoteHome {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Home implements Node {
  id: ID!
  title: String!
  price: Int!
  nbed: Int!
  postedBy(where: UserWhereInput): User
  votes(where: VoteHomeWhereInput, orderBy: VoteHomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VoteHome!]
}

"""A connection to a list of items."""
type HomeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HomeEdge]!
  aggregate: AggregateHome!
}

input HomeCreateInput {
  title: String!
  price: Int!
  nbed: Int!
  postedBy: UserCreateOneWithoutHomesInput
  votes: VoteHomeCreateManyWithoutHomeInput
}

input HomeCreateManyWithoutPostedByInput {
  create: [HomeCreateWithoutPostedByInput!]
  connect: [HomeWhereUniqueInput!]
}

input HomeCreateOneWithoutVotesInput {
  create: HomeCreateWithoutVotesInput
  connect: HomeWhereUniqueInput
}

input HomeCreateWithoutPostedByInput {
  title: String!
  price: Int!
  nbed: Int!
  votes: VoteHomeCreateManyWithoutHomeInput
}

input HomeCreateWithoutVotesInput {
  title: String!
  price: Int!
  nbed: Int!
  postedBy: UserCreateOneWithoutHomesInput
}

"""An edge in a connection."""
type HomeEdge {
  """The item at the end of the edge."""
  node: Home!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HomeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  price_ASC
  price_DESC
  nbed_ASC
  nbed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HomePreviousValues {
  id: ID!
  title: String!
  price: Int!
  nbed: Int!
}

type HomeSubscriptionPayload {
  mutation: MutationType!
  node: Home
  updatedFields: [String!]
  previousValues: HomePreviousValues
}

input HomeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HomeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HomeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HomeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HomeWhereInput
}

input HomeUpdateInput {
  title: String
  price: Int
  nbed: Int
  postedBy: UserUpdateOneWithoutHomesInput
  votes: VoteHomeUpdateManyWithoutHomeInput
}

input HomeUpdateManyWithoutPostedByInput {
  create: [HomeCreateWithoutPostedByInput!]
  connect: [HomeWhereUniqueInput!]
  disconnect: [HomeWhereUniqueInput!]
  delete: [HomeWhereUniqueInput!]
  update: [HomeUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [HomeUpsertWithWhereUniqueWithoutPostedByInput!]
}

input HomeUpdateOneRequiredWithoutVotesInput {
  create: HomeCreateWithoutVotesInput
  connect: HomeWhereUniqueInput
  update: HomeUpdateWithoutVotesDataInput
  upsert: HomeUpsertWithoutVotesInput
}

input HomeUpdateWithoutPostedByDataInput {
  title: String
  price: Int
  nbed: Int
  votes: VoteHomeUpdateManyWithoutHomeInput
}

input HomeUpdateWithoutVotesDataInput {
  title: String
  price: Int
  nbed: Int
  postedBy: UserUpdateOneWithoutHomesInput
}

input HomeUpdateWithWhereUniqueWithoutPostedByInput {
  where: HomeWhereUniqueInput!
  data: HomeUpdateWithoutPostedByDataInput!
}

input HomeUpsertWithoutVotesInput {
  update: HomeUpdateWithoutVotesDataInput!
  create: HomeCreateWithoutVotesInput!
}

input HomeUpsertWithWhereUniqueWithoutPostedByInput {
  where: HomeWhereUniqueInput!
  update: HomeUpdateWithoutPostedByDataInput!
  create: HomeCreateWithoutPostedByInput!
}

input HomeWhereInput {
  """Logical AND on all given filters."""
  AND: [HomeWhereInput!]

  """Logical OR on all given filters."""
  OR: [HomeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HomeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  nbed: Int

  """All values that are not equal to given value."""
  nbed_not: Int

  """All values that are contained in given list."""
  nbed_in: [Int!]

  """All values that are not contained in given list."""
  nbed_not_in: [Int!]

  """All values less than the given value."""
  nbed_lt: Int

  """All values less than or equal the given value."""
  nbed_lte: Int

  """All values greater than the given value."""
  nbed_gt: Int

  """All values greater than or equal the given value."""
  nbed_gte: Int
  postedBy: UserWhereInput
  votes_every: VoteHomeWhereInput
  votes_some: VoteHomeWhereInput
  votes_none: VoteHomeWhereInput
}

input HomeWhereUniqueInput {
  id: ID
}

type Link implements Node {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy(where: UserWhereInput): User
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

"""A connection to a list of items."""
type LinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateOneWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  connect: LinkWhereUniqueInput
}

input LinkCreateWithoutPostedByInput {
  description: String!
  url: String!
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateWithoutVotesInput {
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
}

"""An edge in a connection."""
type LinkEdge {
  """The item at the end of the edge."""
  node: Link!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
}

input LinkUpdateInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  delete: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutPostedByInput!]
}

input LinkUpdateOneRequiredWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  connect: LinkWhereUniqueInput
  update: LinkUpdateWithoutVotesDataInput
  upsert: LinkUpsertWithoutVotesInput
}

input LinkUpdateWithoutPostedByDataInput {
  description: String
  url: String
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateWithoutVotesDataInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
}

input LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutPostedByDataInput!
}

input LinkUpsertWithoutVotesInput {
  update: LinkUpdateWithoutVotesDataInput!
  create: LinkCreateWithoutVotesInput!
}

input LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutPostedByDataInput!
  create: LinkCreateWithoutPostedByInput!
}

input LinkWhereInput {
  """Logical AND on all given filters."""
  AND: [LinkWhereInput!]

  """Logical OR on all given filters."""
  OR: [LinkWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LinkWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input LinkWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createVote(data: VoteCreateInput!): Vote!
  createVoteHome(data: VoteHomeCreateInput!): VoteHome!
  createLink(data: LinkCreateInput!): Link!
  createUser(data: UserCreateInput!): User!
  createHome(data: HomeCreateInput!): Home!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateVoteHome(data: VoteHomeUpdateInput!, where: VoteHomeWhereUniqueInput!): VoteHome
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateHome(data: HomeUpdateInput!, where: HomeWhereUniqueInput!): Home
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteVoteHome(where: VoteHomeWhereUniqueInput!): VoteHome
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteUser(where: UserWhereUniqueInput!): User
  deleteHome(where: HomeWhereUniqueInput!): Home
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertVoteHome(where: VoteHomeWhereUniqueInput!, create: VoteHomeCreateInput!, update: VoteHomeUpdateInput!): VoteHome!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertHome(where: HomeWhereUniqueInput!, create: HomeCreateInput!, update: HomeUpdateInput!): Home!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput): BatchPayload!
  updateManyVoteHomes(data: VoteHomeUpdateInput!, where: VoteHomeWhereInput): BatchPayload!
  updateManyLinks(data: LinkUpdateInput!, where: LinkWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyHomes(data: HomeUpdateInput!, where: HomeWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManyVoteHomes(where: VoteHomeWhereInput): BatchPayload!
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyHomes(where: HomeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  voteHomes(where: VoteHomeWhereInput, orderBy: VoteHomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VoteHome]!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  homes(where: HomeWhereInput, orderBy: HomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Home]!
  vote(where: VoteWhereUniqueInput!): Vote
  voteHome(where: VoteHomeWhereUniqueInput!): VoteHome
  link(where: LinkWhereUniqueInput!): Link
  user(where: UserWhereUniqueInput!): User
  home(where: HomeWhereUniqueInput!): Home
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  voteHomesConnection(where: VoteHomeWhereInput, orderBy: VoteHomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteHomeConnection!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  homesConnection(where: HomeWhereInput, orderBy: HomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HomeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  voteHome(where: VoteHomeSubscriptionWhereInput): VoteHomeSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  home(where: HomeSubscriptionWhereInput): HomeSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  homes(where: HomeWhereInput, orderBy: HomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Home!]
  votesHome(where: VoteHomeWhereInput, orderBy: VoteHomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VoteHome!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  homes: HomeCreateManyWithoutPostedByInput
  votesHome: VoteHomeCreateManyWithoutUserInput
}

input UserCreateOneWithoutHomesInput {
  create: UserCreateWithoutHomesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesHomeInput {
  create: UserCreateWithoutVotesHomeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutHomesInput {
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  votesHome: VoteHomeCreateManyWithoutUserInput
}

input UserCreateWithoutLinksInput {
  name: String!
  email: String!
  password: String!
  votes: VoteCreateManyWithoutUserInput
  homes: HomeCreateManyWithoutPostedByInput
  votesHome: VoteHomeCreateManyWithoutUserInput
}

input UserCreateWithoutVotesHomeInput {
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  votes: VoteCreateManyWithoutUserInput
  homes: HomeCreateManyWithoutPostedByInput
}

input UserCreateWithoutVotesInput {
  name: String!
  email: String!
  password: String!
  links: LinkCreateManyWithoutPostedByInput
  homes: HomeCreateManyWithoutPostedByInput
  votesHome: VoteHomeCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  homes: HomeUpdateManyWithoutPostedByInput
  votesHome: VoteHomeUpdateManyWithoutUserInput
}

input UserUpdateOneRequiredWithoutVotesHomeInput {
  create: UserCreateWithoutVotesHomeInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutVotesHomeDataInput
  upsert: UserUpsertWithoutVotesHomeInput
}

input UserUpdateOneRequiredWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutVotesDataInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateOneWithoutHomesInput {
  create: UserCreateWithoutHomesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutHomesDataInput
  upsert: UserUpsertWithoutHomesInput
}

input UserUpdateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLinksDataInput
  upsert: UserUpsertWithoutLinksInput
}

input UserUpdateWithoutHomesDataInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  votesHome: VoteHomeUpdateManyWithoutUserInput
}

input UserUpdateWithoutLinksDataInput {
  name: String
  email: String
  password: String
  votes: VoteUpdateManyWithoutUserInput
  homes: HomeUpdateManyWithoutPostedByInput
  votesHome: VoteHomeUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesDataInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  homes: HomeUpdateManyWithoutPostedByInput
  votesHome: VoteHomeUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesHomeDataInput {
  name: String
  email: String
  password: String
  links: LinkUpdateManyWithoutPostedByInput
  votes: VoteUpdateManyWithoutUserInput
  homes: HomeUpdateManyWithoutPostedByInput
}

input UserUpsertWithoutHomesInput {
  update: UserUpdateWithoutHomesDataInput!
  create: UserCreateWithoutHomesInput!
}

input UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput!
  create: UserCreateWithoutLinksInput!
}

input UserUpsertWithoutVotesHomeInput {
  update: UserUpdateWithoutVotesHomeDataInput!
  create: UserCreateWithoutVotesHomeInput!
}

input UserUpsertWithoutVotesInput {
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  homes_every: HomeWhereInput
  homes_some: HomeWhereInput
  homes_none: HomeWhereInput
  votesHome_every: VoteHomeWhereInput
  votesHome_some: VoteHomeWhereInput
  votesHome_none: VoteHomeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote implements Node {
  id: ID!
  link(where: LinkWhereInput): Link!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  link: LinkCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutLinkInput {
  user: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutUserInput {
  link: LinkCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

type VoteHome implements Node {
  id: ID!
  home(where: HomeWhereInput): Home!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type VoteHomeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteHomeEdge]!
  aggregate: AggregateVoteHome!
}

input VoteHomeCreateInput {
  home: HomeCreateOneWithoutVotesInput!
  user: UserCreateOneWithoutVotesHomeInput!
}

input VoteHomeCreateManyWithoutHomeInput {
  create: [VoteHomeCreateWithoutHomeInput!]
  connect: [VoteHomeWhereUniqueInput!]
}

input VoteHomeCreateManyWithoutUserInput {
  create: [VoteHomeCreateWithoutUserInput!]
  connect: [VoteHomeWhereUniqueInput!]
}

input VoteHomeCreateWithoutHomeInput {
  user: UserCreateOneWithoutVotesHomeInput!
}

input VoteHomeCreateWithoutUserInput {
  home: HomeCreateOneWithoutVotesInput!
}

"""An edge in a connection."""
type VoteHomeEdge {
  """The item at the end of the edge."""
  node: VoteHome!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteHomeOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VoteHomePreviousValues {
  id: ID!
}

type VoteHomeSubscriptionPayload {
  mutation: MutationType!
  node: VoteHome
  updatedFields: [String!]
  previousValues: VoteHomePreviousValues
}

input VoteHomeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteHomeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteHomeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteHomeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteHomeWhereInput
}

input VoteHomeUpdateInput {
  home: HomeUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesHomeInput
}

input VoteHomeUpdateManyWithoutHomeInput {
  create: [VoteHomeCreateWithoutHomeInput!]
  connect: [VoteHomeWhereUniqueInput!]
  disconnect: [VoteHomeWhereUniqueInput!]
  delete: [VoteHomeWhereUniqueInput!]
  update: [VoteHomeUpdateWithWhereUniqueWithoutHomeInput!]
  upsert: [VoteHomeUpsertWithWhereUniqueWithoutHomeInput!]
}

input VoteHomeUpdateManyWithoutUserInput {
  create: [VoteHomeCreateWithoutUserInput!]
  connect: [VoteHomeWhereUniqueInput!]
  disconnect: [VoteHomeWhereUniqueInput!]
  delete: [VoteHomeWhereUniqueInput!]
  update: [VoteHomeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteHomeUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteHomeUpdateWithoutHomeDataInput {
  user: UserUpdateOneRequiredWithoutVotesHomeInput
}

input VoteHomeUpdateWithoutUserDataInput {
  home: HomeUpdateOneRequiredWithoutVotesInput
}

input VoteHomeUpdateWithWhereUniqueWithoutHomeInput {
  where: VoteHomeWhereUniqueInput!
  data: VoteHomeUpdateWithoutHomeDataInput!
}

input VoteHomeUpdateWithWhereUniqueWithoutUserInput {
  where: VoteHomeWhereUniqueInput!
  data: VoteHomeUpdateWithoutUserDataInput!
}

input VoteHomeUpsertWithWhereUniqueWithoutHomeInput {
  where: VoteHomeWhereUniqueInput!
  update: VoteHomeUpdateWithoutHomeDataInput!
  create: VoteHomeCreateWithoutHomeInput!
}

input VoteHomeUpsertWithWhereUniqueWithoutUserInput {
  where: VoteHomeWhereUniqueInput!
  update: VoteHomeUpdateWithoutUserDataInput!
  create: VoteHomeCreateWithoutUserInput!
}

input VoteHomeWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteHomeWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteHomeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteHomeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  home: HomeWhereInput
  user: UserWhereInput
}

input VoteHomeWhereUniqueInput {
  id: ID
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  link: LinkUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutLinkInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutLinkInput!]
}

input VoteUpdateManyWithoutUserInput {
  create: [VoteCreateWithoutUserInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutUserInput!]
}

input VoteUpdateWithoutLinkDataInput {
  user: UserUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithoutUserDataInput {
  link: LinkUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutLinkDataInput!
}

input VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutUserDataInput!
}

input VoteUpsertWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutLinkDataInput!
  create: VoteCreateWithoutLinkInput!
}

input VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutUserDataInput!
  create: VoteCreateWithoutUserInput!
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  link: LinkWhereInput
  user: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
